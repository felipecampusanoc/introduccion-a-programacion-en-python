** Introducción a Programación en Python **
Video: https://www.youtube.com/watch?v=DLikpfc64cA
__________________________________________________________
__________________________________________________________
1.- Python se utiliza en:
- Ciencia de datos
- Desarrollo web
- Inteligencia artificial
- Aprendizaje automático
- Enseñanza de programación
- Desarrollo de juegos
- Medicina
__________________________________________________________
__________________________________________________________
2. - Idle
This PC > Local Disk(C:) > Users > estef > AppData >
Local > Programs > Python > Python39 > Lib > idlelib >
idle (Python File) = Abre una consola

2.1. Imprimir texto
print("Hola mundo");

2.2.- Guardar archivo: Extensión .py
__________________________________________________________
__________________________________________________________
3.- Variable: Nombre que se le asigna a un valor en el
programa, ese nombre representa un espacio en memoria.
Cuando se crea una variable basicamente se crea un 
espacio en memoria donde se podra alojar o guardar un
valor especifico, nosotros asignamos el valor a la
variable. 

Ejemplo: num = 5

=   | Asignación
5   | Valor
num | Nombre de la variable
------------------------
Sintaxis: <var> = <val>

<var> | Nombre de
------------------------
$* Idle
>>> num = 15
>>> num
15
----------------------------------------------------------
3.1.- Reglas para nombrar variables
Los nombres de variables deben empezar con una letra o
con un guión bajo.
Solo pueden contener caracteres alfanumericos (A-Z, a-z,
0-9, _).

Se distingue entre mayusculas y minusculas.
Edad vs. Edad vs. EDAD

Ejemplo:
$* Idle
>>> edad = 24
>>> Edad = 70
>>> EDAD = 15
>>> edad 
24
__________________________________________________________
__________________________________________________________
4.- Tipos de datos
4.1.- Enteros:
Números que no tienen decimales.
- Positivos
- Negativos
- Cero 

Se puede utilizar una funcion type() para obtener el
tipo de dato numerico.

>>> type(5)
<class 'int'>
>>> type(-15)>
<class 'int'>
>>> type(0)>
<class 'int'>

No hay limite para el numero maximo.
----------------------------------------------------------
4.1.1.- Números en coma flotante:
Números que tienen decimales.
- Positivos
- Negativos

>>> type(0.5)
<class 'float'>
>>> type(13.4)>
<class 'float'>
>>> type(4.0)>
<class 'float'>
----------------------------------------------------------
4.1.2.- Booleanos(True|False): Los valores booleanos 
son importantes para expresiones condicionales.
>>> type(true)>
<class 'bool'>
>>> type(false)>
<class 'bool'>
----------------------------------------------------------
4.2.- Cadenas de caracteres(String): Secuencia de
caracteres encerrados entre comillas y usados para
representar textor en el programa.

$* idle: Ejemplo:
>>> nombre = "Nora"
>>> nombre
'Nora'

>>> type("Python")>
<class 'str'>
----------------------------------------------------------
4.2.1.- Diferencias entre entero y caracteres
>>> type(5)>
<class 'int'>
>>> type("5")>
<class 'str'>
----------------------------------------------------------
4.2.2.- ¿Cuantos caracteres tiene una cadena?
$* idle: Ejemplo:
>>> len("A")
1
>>> len("Python")
6
----------------------------------------------------------
4.2.3.- Estructura interna de la cadena

Indice de la cadena de caracteres"Python"

P = 0
y = 1
t = 2
h = 3
o = 4
n = 5

Para ingresar a estos caracteres se debe utilizar una
herramienta llamada indexación(Indexing)

Sintaxis: <cadena>[<índice>]

>>> palabra = "Python"
>>> palabra[0]
'P'
>>> palabra[1]
'y'
>>> palabra[2]
't'
>>> palabra[3]
'h'
>>> palabra[4]
'o'
>>> palabra[5]
'n'
----------------------------------------------------------
4.2.4.- Rebanado(Slicing): Obtener una rebanada
(porción) de una cadena de caracteres.

Sintaxis: <cadena>[inicio:fin]
inicio: Índice que marca el inicio de la rebanada
fin: Índice que marca el fin de la rebanada

$* idle: Ejemplo:
>>> palabra = "Python"
>>> palabra[1:4]
'yth'

Sintaxis: <cadena>[inicio:fin:paso]
paso: Como "saltar" de un caracter al siguiente

$* idle: Ejemplo:
>>> palabra = "Python"
>>> palabra[1:6:2]
'yhn'
----------------------------------------------------------
4.2.5.- Métodos de Cadena de Caracteres: Operaciones
comunes que vienen implementadas en Python

sintaxis: <cadena>.<método>(<valores>)
----------------------------------------------------------
4.2.5.1.- Capitalize: Retorna una copia de la cadena
con el primer caracter en mayuscula y el resto en
minuscula.

sintaxis: <cadena>.capitalize()
$* idle: Ejemplo:
>>> palabra = "python"
>>> palabra[1:6:2]
'yhn'

$* Métodos importantes
- find: Encontrar caracteres
- index: Encontrar caracteres
- isalnum
- isalpha
- isdecimal
- isdigit
- islower
- isupper
- lower
- upper
----------------------------------------------------------
4.3.- Recibiendo datos del usuario: Se utiliza la
función input()

sintaxis: <var> = input(<mensaje>)

>>> num = input ("Ingreso un número: ")
>>> print(num)
3
>>> type(num)
<class 'str'>

La funcion input() siempre retorna una cadena de
caracteres.

Transformar un numero string en entero:

num = int(input("ingrese un Número: ")) 
_________________________________________________________
_________________________________________________________
5.- Operadoradores 

Operador: Símbolos que denotan una operación.
Operandos: Valores con los cuales se ejecuta la 
operación.

Operador + Operandos = Expresión

Expresión: Combinación de valores, variables, y
operadores que al ser evaluados resultan en un valor.
----------------------------------------------------------
Las expresiones se evalúan de izquierda a derecha.
Excepto cuando ciertos operadores tienen mayor 
"importancia" para el orden de las operaciones.
----------------------------------------------------------
Operadores:
- Aritméticos
- Lógicos
- De Asignación
- Relacionales
----------------------------------------------------------
Operadores Aritméticos: Nos permiten realizar 
operaciones aritmética en el programa.
- Suma
- Resta
- Multiplicación
- División
- División Entera
- Exponente
- Módulo
----------------------------------------------------------
5.1.- Operador +
>>> 5 + 6
11
>>> 2 + 3
5
>>> 6 + 8
14
>>> 3.4. + 5.6
9.0
----------------------------------------------------------
5.2.- Concatenar
>>> "Hola" + " " + "Mundo"
'Hola Mundo'
----------------------------------------------------------
5.3.- Operador -
>>> 10 - 4
6
>>> 4 - 8
-4
>>> 0 - 6
-6
>>> 3.4. - 5.6
-2.19999999999999997
>>> 2 - 8.9
-6.9
----------------------------------------------------------
5.4.- Operador *
>>> 5 * 6
30
>>> 4 * 0
0
>>> -5 * -8
40
>>> -5 * 8
-40
>>> 4.5. * 7.9
35.550000000000004
----------------------------------------------------------
5.5.- Operador /
>>> 15 / 5
3.0
>>> 15 / 8
1.875
>>> 12.5 / 4
3.125
>>> 4 / 4.5
0.888888888888
>>> 4.2 / 4.1
1.024390243902439
---------------------------------------------------------
5.6.- División entera
>>> 15 // 5
3
>>> 3 // 5
0
>>> 157 // 56
2
>>> -4 // -6
0
>>> -15 // -10
1

Ejemplo entre // y /
>>> 5.6 / 3.4
1.670588235294117
>>> 5.6 // 3.4
1.0

Nota: Una de las aplicaciones del operador // es en el
algortimo de búsqueda binaria que nos permite encontrar
un valor en una secuencia de forma muy eficiente.
---------------------------------------------------------
5.7.- Operador de exponenciación
>>> 5 ** 3
125
>>> 3 ** 8
6561
>>> 2 ** 3
8
>>> 4.5 ** 4.7
1175.1649090387732
>>> 16 ** (1/2)
4.0
>>> 5 ** 0
1
----------------------------------------------------------
5.8.- Operador módulo(%): Retorna el resto de la
división. Es comunmente utilizado para verificar si un
número es par o impar.

>>> 5 % 2
1
>>> 4 % 3
1
>>> 16 % 4
0
>>> 16 % 6
4
>>> 18 % 4
2
----------------------------------------------------------
5.9.- Determinar orden en las operaciones.

PEMDAS = Acronimo

P = Paréntesis
E = Exponentes
M = Multiplicacion
D = Division
A = Suma(Adicion)
S = Resta(Sustraccion)
----------------------------------------------------------
5.10.- Operadores lógicos: Nos permite trabajar con
valores booleanos (True y False).

Existe tres operadores logicos que se pueden utilizar
en Python:

> Operador logico and: Evalua si el operando izquierdo
y el derecho son verdaderos.

Tabla logica del operador and
------------------------
X    | Y     | X and Y |
------------------------
True | True  | True    |
True | False | False   |
False| True  | False   |
False| False | False   |
------------------------

Ejemplo:
	T	   F
>>> (5 < 6) and (6 > 8)
False

$$> Operador logico or:
------------------------
X    | Y     | X and Y |
------------------------
True | True  | True    |
True | False | True    |
False| True  | True    |
False| False | False   |
------------------------

Ejemplo:
       T          F
>>> (5 < 6) or (6 > 8)
True

$$> Operador logico not:
---------------
X     | not X |
---------------
True  | False | 
False | False | 
---------------
>>> not True
False
>>> not False
True

$$> Prioridad:

- not (Mayor)
- and (Medio)
- or  (Menor)

$$> Operadores relacionales: Son utilizados para 
comparar valores y retornan un valor booleano.

>  (Mayor que)
>= (Mayor igual que)
<  (Menor que)
<= (Menor igual que)
== (Igual que)
!= (No igual a)

Ejemplo:

>>> 5 > 6
False
>>> 10 > 3
True

>>> 5 > 5
False
>>> 5 >= 5
True

>>> 5 < 6
True
>>> 10 < 3
False

>>> 3 < 3
False
>>> 3 <= 3
True

>>> 8 == 8
True
>>> 8 != 8
False

>>> "Hola" == "Hola"
True
>>> "Hola" == "H"
False

>>> "ABC" < "A"
False
>>> "A" < "B"
True
>>> "B" > "A"
True
>>> "C" != "D"
True
>>> "Noris" == "Gino"
False
----------------------------------------------------------
5.11.- Operadores de Asignación: Son utilizados para
asignar valores a las variables del programa.

=
-=
/=
//=
+=
*=
**=
%=

Ejemplo:

>>> edad = 56
>>> edad += 3
>>> edad 
59
>>> edad -= 2
>>> edad 
57
>>> edad *= 3
>>> edad
171
>>> edad /= 2
>>> edad
85.5
__________________________________________________________
__________________________________________________________
6.- Sentencias condicionales: Instrucción o un 
grupo de instrucciones cuya ejecución depende del
valor de una condición booleana.

$$> Sintaxis: <IF> Puede haber mas de una clausula
'elif', pero solo una clausula 'else'.

if <condición>:
	# Código
elif <condicion2>:
	# Código
else:
	# Código

$$> Ejemplo:

temp = 15

if temp < 25:
	print("Muy Frío")
elif temp < 25:
	print("Frío")
else:
	print("Calor")
__________________________________________________________
__________________________________________________________
7.- Comentario: Texto que se escribe en el programa
para facilitar su comprensión. 

Proposito: Describir la logica de ciertas partes del
codigo a otros programadores que lean el programa.

# Comentario
__________________________________________________________
__________________________________________________________
8.- Listas: Estructura de datos utilizada para
almacenar multiples valores en secuencia.

Secuencias ordenadas: Cada uno de sus elementos estan
puestos en un orden especifico, pueden ser numeros o
caracteres.

[1, 2, 3, 4]
["a", "b", "c"]

Indices:
["a", "b", "c"]
[0]   [1]   [2]

Caracteristicas:
- Secuencia ordenada de valores.
- Puede contener valores de cualquier tipo.
- Puede contener valores de distintos tipos.
- Cada posiciones en la lista esta asociada a un entero
llamado "indice".
- Es mutable. Puede ser modificada.
----------------------------------------------------------
8.1.- Acceder a un elemento: Para acceder a un elemento
de la lista, usamos su indice correspondiente.

Sintaxis: <lista>[<indice>]

["a", "b", "c", "d"]
[0]   [1]   [2]  [3]

Ejemplo:
>>> letras = ["a", "b", "c", "d"] 
>>> letras[0]
'a'
>>> letras[1]
'b'
>>> letras[2]
'c'
>>> letras[3]
'd'
----------------------------------------------------------
8.2.- Agregar un elemento:

1)  Al final de la lista
<lista>.append(<elem>)

>>> nums = [1, 2, 3, 4]
>>> nums.append(5)
>>> nums
[1, 2, 3, 4, 5]

2) En un indice especifico
<lista>.insert(<indice>, <elem>)
>>> nums = [1, 2, 3, 4, 5]
>>> nums.insert(0, 6)
>>> nums
[6, 1, 2, 3, 4, 5]
----------------------------------------------------------
8.3.- Remover un elemento: La primera ocurrencia sera
removida.
<lista>.remove(<elem>)
>>> a = [1, 2, 3, 4, 5, 4]
>>> a.remove(4)
>>> a
[1, 2, 3, 5, 4]
----------------------------------------------------------
8.4.- Encontrar un elemento:
Sintaxis: <elem> in <lista>
>>> vocales = ['a', 'e', 'i', 'o', 'u']
>>> 'a' in vocales
True
>>> 'z' in vocales
False

$$> Metodo .index(<elem>): Retorna el indice de la primera
ocurrencia del elemento en la lista. Si no se encuentra el
elemento, ocurre un error.

Sintaxis: <lista>.index(<elem>)
Ejemplo:
>>> vocales = ['a', 'e', 'i', 'o', 'u']
>>> vocales.index(i)
2
----------------------------------------------------------
8.5.- Cambiar un elemento: Las listas son mutables,
pueden ser cambiadas. Sus elementos pueden ser modificados.

Sintaxis: <lista>[<indice>] = <nuevo_valor>
>>> nums = [1, 2, 3, 4, 5]
>>> nums[0] = -8
>>> nums
[-8, 2, 3, 4, 5]

$$> Métodos de las listas: Operaciones comunes de listas
que ya estan implementadas en Python.
<lista>.<método>(<parametros>)

Métodos importantes de listas:
- .count(<elem>)
- .extend(<lista>)
- .pop()
- .reverse()
- .sort()
__________________________________________________________
__________________________________________________________
9.- Tuplas: Estructura de datos inmutable que contiene
una secuencia ordenada de elementos.

Secuencia ordenada:
("a", "b", "c")
[0]   [1]   [2]

Caracteristicas:
- Secuencua ordenada de valores.
- Puede contener valores de cualquier tipo de datos.
- Puede contener valores de distintos tipos de datos.
- Cada posicion de la tupla se identifica con un entero
denominado "indice".
- Es inmutable. No puede ser modificada.

Inmutable = No puede cambiar
----------------------------------------------------------
9.1.- Acceder a un elemento
Secuencia ordenada:
("a", "b", "c")
[0]   [1]   [2]

>>> letras[0]
'A'
>>> letras[1]
'B'
>>> letras[2]
'C'
----------------------------------------------------------
9.2.- Encontrar un elemento: <elem> in <tupla>
>>> letras = ("a", "b", "c", "d")
>>> "a" in letras
True
>>> "b" in letras
True
>>> "z" in letras
False
>>> "x" in letras
False

<tupla>.index(<elem>)
>>> nums = (3, 5, 2, 8, 4, 6, 3, 2)
>>> nums.count(4)
1
__________________________________________________________
__________________________________________________________
10.- Diccionarios: Colección de pares clave-valor.

Par Clave-Valor
Clave	  Valor
{  "A"  :  45  ,  "B"  :  30  }

Caracteristicas:
- Coleccion de Pares Clave-Valor.
- Las claves deben ser unicas e inmutables.
- Los valores asociados pueden ser de cualquier tipo.
- La clave se usa para acceder a su valor asociado.
- Los pares clave-valor pueden ser modificados, añadidos,
y eliminados.
----------------------------------------------------------
10.1.- Acceder a un Valor:
Clave -----> Valor
<diccionario>[<clave>]

1) Primera forma
>>> edades = {"Gino": 15, "Nora": 45}
>>> edades["Gino"]
15
>>> edades["Nora"]
45

2) Segunda forma
>>> edades = {"Gino": 15, "Nora": 45}
>>> edades.get["Gino"]
15
----------------------------------------------------------
10.2.- Añadir modificar:
<diccionario>[<clave>] = <nuevo_valor>

>>> edades = {"Gino": 15, "Nora": 45}
>>> edades["Talina"] = 67
>>> edades
{'Gino': 15, 'Nora': 45, 'Talina': 67}
----------------------------------------------------------
10.3.- Remover: del <dicc>[<clave>]
>>> edades = {"Gino": 15, "Nora": 45}
>>> del edades["Gino"]
>>> edades
{'Nora': 45}
----------------------------------------------------------
10.4.- Revisar existencia:
<elem> in <dicc>

>>> edades = {"Gino": 15, "Nora": 45}
>>> "Gino" in edades
True
>>> "Emily" in edades
False
>>> "Nora" in edades
True
__________________________________________________________
__________________________________________________________
11.- Documentación: 

www.python.org > Documentation > Python Docs
__________________________________________________________
__________________________________________________________
12.- Ciclos For: Estructura de control en programacion
que permite ejecutar una o varias líneas de código 
múltiples veces. Lo usamos cuando sabemos con antelación
cuántas veces debemos repetir ciertas instrucciones.

Iteración: Es una palabra importante en programación, 
esta es una repeticion de un cierto grupo de reglas.

Sintaxis: for <var> in range(<inicio>, <fin>):
# Código
---------------------------------------------------------
12.1.- Variable de control: <var>
- Variable que puede ser utilizada en el código que se va
a repetir.
- Se actualiza automáticamente antes de cada iteración.
- Debe tener un nombre descriptivo.
---------------------------------------------------------
12.2.- Función range: Esta funcion va a retornar una 
secuencia de valores y cada uno de esos valores va a ser
asignado a la variable de la funcion 1 a 1.

Ejemplo:

>>> for i in range(4):
	print(i)
>>>
0 
1
2
3

La funcion range retorna una sencuencia de numeros 
enteros desde el 0 hasta el finito.

La i es la variable de control que en print(i) se 
actualiza en cada iteración.

range(start, stop[, step])
start: El valor del parámetro start(0 si no se utiliza
el parametro)
stop: El valor del parametro stop
step: El valor del parametro step(1 si no se utiliza el
parametro)
---------------------------------------------------------
12.3.- Ciclos sobre iterables: Un interable es un 
elemento que retorna sus elementos 1 a la vez son datos 
o valores o estructuras en Python que pueden retornar 
cada uno de esos elementos 1 a la vez asi como range 
retorna una secuencia y cada elemento de esa secuencia 
se asigna a una variable podemos usar iterables para 
asignar sus valores.

Para iterar sobre: (iterable**)
- Cadenas de caracteres
- Listas
- Tuplas
- Diccionarios
- Otros...

En cada uno de estos elementos se va asignar a la variable
de control, uno a la vez, uno por iteración y puedes
utilizar ese elemento en nuestro codigo en el cuerpo del
ciclo.

Sintaxis: for <var> in <iterable**>:
	  # Código

Ejemplo:
for char in "Loops";
____________________
Iteration  |  char |
--------------------
1	      'L'  |
--------------------
2	      'o'  |
--------------------
3	      'o'  |
--------------------
4	      'p'  |
--------------------
5	      's'  |
--------------------

Cada caracter de la cadena va a ser asignado a la 
variable de control 1 a la vez.

El primer caracter en la primera iteracion.
El segundo caracter en la segunda iteracion.
El tercer caracter en la tercera iteracion.
El cuarto caracter en la cuarta iteracion.
EL quinto caracter en la quinta iteracion.

Luego de la quinta iteracion, el proceso se va a detener.


Sintaxis para listas: for nom in [1, 2, 3]:
		      # Code

Ejemplo para listas:

>>> for nom in [1, 2, 3]:
	print(num)
>>>
1
2
3

Sintaxis para diccionarios: 

letras = {"a": 1, "b": 2}
for clave in letras: 
    print(clave) 

Tambien se puede iterar sobre:
- Claves
- Valores
- Pares Clave-Valor

Ejemplo para diccionarios:
>>> letras = {"a": 1, "b": 2}
>>> for clave in letras:
	print(clave)

a
b
>>> for valor in letras.values():
	print(valor)
1
2
>>> for clave, valor in letras.items():
	print(clave, valor)
a 1
b 2
---------------------------------------------------------
12.4.- Ciclos While: Ciclo que continua mientras una
condicion es verdadera y se detiene cuando es falsa o
se puede detener manualmente sino si esto no ocurre
se producira un ciclo infinito.

Sintaxis: while <condición>:
	  # Código

Iteraciones: Un ciclo while no tiene un número fijo o
predeterminado de iteraciones.

Variable de Control: Los ciclos while no actualizan la(s)
variable(s) de control automaticamente.

Ejemplo:
x = 20

While x < 35: 	  	---> x SEA menor a 35
	print(x)
	x += 3		---> Incrementar por 3

>>>
20
23
26
29
32
__________________________________________________________
__________________________________________________________
13.- Función: Bloque de código reutilizable que realiza 
una sola tarea especifica.

Ventajas
- Reusable
- Conciso
- Leíble
- Mantenible
- Comprobable

Sintaxis: def <funcion>():
	  # Código

Ejemplo:
def mostrar_mensaje():
	print("¡Hola, Mundo!")
---------------------------------------------------------
13.1.- Llamar a una funcion: Ejecutar el código del 
cuerpo de la funcion.

Ejemplo:

>>> def mostrar_mensaje():
	print("¡Hola, Mundo!")
>>> mostrar_mensaje()
¡Hola, Mundo!
>>> mostrar_mensaje()
¡Hola, Mundo!
>>> mostrar_mensaje()
¡Hola, Mundo!
---------------------------------------------------------
13.2.- Parámetro: Variable que se incluye en la definicion
de la funcion para representar y guardar un valor que
podemos pasar cuando llamamos a la funcion.

Parámetro -> Definición de la Función

Sintaxis: def <funcion>(<parametro>):
		# Código

El parámetro puede ser usado en el cuerpo de la funcion
como cualquier otra variable.

Ejemplo:
def mostrar_doble(num):
	print(num * 2 )

Varios Parámetros -> Separados por Comas

Def sumar(x, y):
	print(x + y)
---------------------------------------------------------
13.3.- Argumento: Valor que asignamos a un parámetro
cuando llamamos a una función.

Argumentos -> Llamada a la función

Los argumentos son asginados a sus correspondientes 
parametros.

Sintaxis:

Definicion de la funcion
def sumar(x, y):
	print(x + y)

Llamada a la función
sumar(4, 5)

Ejemplo:
>>> def sumar(x, y):
	print(x + y)

>>> sumar(4, 5)
9

Parametros -> Definicion
Argumentos -> Llamada
---------------------------------------------------------
13.4.- Return: La funcion puede retornar un valor luego 
de completar la tarea correspondiente.

Sintaxis: def<funcion>(<params>):
		return <valor>

Cuando se ejecuta 'return', la ejecucion de la funcion
se detiene inmediatamente.
---------------------------------------------------------
13.5.- Scope(Alcance de una Variable): Una implicacion
importante de una funcion en python es Scope que es el
alcance que tendra la variable en el programa. Donde se
podra usar. Determina a que variables se tiene acceso
en cada parte del programa.

Variables global y local:
- Scope global: Programa principal
- Scope local: En una funcion

Ejemplo:
x = 6
def f(y):
	print(x + y)
f(2)
_________________________________________________________
_________________________________________________________
14.- Recursión: Definir algo en terminos de si mismo.
Se toma un problema inicial y se divide en varios 
subproblemas que se pueden resolver de la misma forma
para luego resolver el problema inicial completo.

Se ilustra el concepto de recursion con la sucesion de
fibonacci, un ejemplp muy famoso de una sucesion 
recursiva: 

0, 1, 1, 2, 3, 5, 8, 13, 21, ...

Una sucesion es simplemente una secuencia de numeros que
siguen un patron en el caso de fibonacci cada numero.

Fibonacci es el resultado de sumar los numeros anteriores
de la secuencia, ejemplo.

0, 1 = 1
0, 1, 1 = 2
1, 2 = 3 ...

Secuencia: 0,1,1,2,3 ...

14.1.- Funciones recursivas:
- Caso Base: Permite que el proceso se detenga, el proceso
que la funcion se llame una y otra vez.
- Caso Recursivo: El caso recursivo es el que nos permite
descomponer un problema en una version mas pequeña de ese
mismo problema hasta llegar al caso base que detiene el
proceso.
Es como la ilustracion de una muñeca matryoshka, en el que
cada vez hacemos un problemas mas pequeño hasta que se
ensamblan completos hasta formar una solucion para el
problema principal.

def fibonacci(n):
	if n == 0 or n == 1;
		return n
	else:
		return fibonacci(n-1) + fibonacci(n-2)

n = posicion en la sucesion (iniciando en 0)
__________________________________________________________
__________________________________________________________

15.- Archivos: 

Sentencia 'with': Nos permite abrir un archivo y luego
cerrarlo automaticamente.

Ejemplo:

with open("<nombre_archivo>.txt", "r") as archivo:
	# Trabajar con el archivo

with open("frases_famosas.txt", "r") as archivo:
	for linea in archivo:
	print("==== Frase ====")
	print(linea)

>>> Frases

15.1.- Modos de apertura de archivos: Hay diferentes modos
de aperturas.

- r (read - leer)
- w (write - escribir)
- a (append - añadir)
- Agregar un + incluye leer. Por ejemplo, w+ es leer y 
escrir.

15.2.- Modificar archivos: Hay 2 formas para modificar.
-Reemplazar contenido
- Añadir contenido
__________________________________________________________
__________________________________________________________
16.- Importaciones
__________________________________________________________
__________________________________________________________
17.- Errores y excepciones
__________________________________________________________
__________________________________________________________
18.- Programacion orientada a objetos